<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Tic Tac Toe</title>
  <style>
    body {
      font-family: Arial, sans-serif;
      background: linear-gradient(to right, #4facfe, #00f2fe);
      text-align: center;
      padding: 50px;
      color: white;
    }

    h1 {
      margin-bottom: 20px;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      gap: 10px;
      justify-content: center;
      margin: 20px auto;
    }

    .cell {
      width: 100px;
      height: 100px;
      background: white;
      color: black;
      font-size: 2.5em;
      display: flex;
      align-items: center;
      justify-content: center;
      cursor: pointer;
      border-radius: 8px;
      user-select: none;
    }

    .cell:hover {
      background: #f1f1f1;
    }

    .controls {
      margin-top: 20px;
    }

    select, button {
      padding: 10px 15px;
      margin: 5px;
      font-size: 16px;
      border-radius: 6px;
      border: none;
    }
  </style>
</head>
<body>

  <h1>ðŸŽ® Tic Tac Toe</h1>

  <label>Choose Mode: </label>
  <select id="mode">
    <option value="pvp">Player vs Player</option>
    <option value="ai">Player vs Computer</option>
  </select>

  <div id="status">Click any box to begin!</div>

  <div class="board" id="board"></div>

  <div class="controls">
    <button onclick="resetGame()">Restart Game</button>
  </div>

  <script>
    const boardEl = document.getElementById('board');
    const statusEl = document.getElementById('status');
    const modeEl = document.getElementById('mode');

    let board = ["", "", "", "", "", "", "", "", ""];
    let currentPlayer = "X";
    let gameOver = false;
    let mode = "pvp";

    const winningCombos = [
      [0,1,2], [3,4,5], [6,7,8],
      [0,3,6], [1,4,7], [2,5,8],
      [0,4,8], [2,4,6]
    ];

    modeEl.addEventListener("change", () => {
      mode = modeEl.value;
      resetGame();
    });

    function renderBoard() {
      boardEl.innerHTML = "";
      board.forEach((cell, i) => {
        const cellDiv = document.createElement('div');
        cellDiv.className = "cell";
        cellDiv.textContent = cell;
        cellDiv.onclick = () => handleClick(i);
        boardEl.appendChild(cellDiv);
      });
    }

    function handleClick(index) {
      if (board[index] || gameOver) return;
      board[index] = currentPlayer;
      renderBoard();

      if (checkWinner(currentPlayer)) {
        statusEl.textContent = `ðŸŽ‰ Player ${currentPlayer} wins!`;
        gameOver = true;
        return;
      }

      if (board.every(cell => cell !== "")) {
        statusEl.textContent = "It's a draw!";
        gameOver = true;
        return;
      }

      currentPlayer = currentPlayer === "X" ? "O" : "X";

      if (mode === "ai" && currentPlayer === "O") {
        statusEl.textContent = "Computer's turn...";
        setTimeout(() => {
          aiMove();
        }, 500);
      } else {
        statusEl.textContent = `Player ${currentPlayer}'s turn`;
      }
    }

    function aiMove() {
      // Simple AI: choose random empty cell
      let emptyCells = board.map((val, i) => val === "" ? i : null).filter(i => i !== null);
      let move = emptyCells[Math.floor(Math.random() * emptyCells.length)];
      board[move] = "O";
      renderBoard();

      if (checkWinner("O")) {
        statusEl.textContent = "ðŸ’€ Computer wins!";
        gameOver = true;
        return;
      }

      if (board.every(cell => cell !== "")) {
        statusEl.textContent = "It's a draw!";
        gameOver = true;
        return;
      }

      currentPlayer = "X";
      statusEl.textContent = "Your turn (X)";
    }

    function checkWinner(player) {
      return winningCombos.some(combo => combo.every(i => board[i] === player));
    }

    function resetGame() {
      board = ["", "", "", "", "", "", "", "", ""];
      currentPlayer = "X";
      gameOver = false;
      statusEl.textContent = mode === "ai" ? "Your turn (X)" : "Player X's turn";
      renderBoard();
    }

    renderBoard();
  </script>

</body>
</html>
